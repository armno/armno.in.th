---
title: Debugging Layout Shift
pubDate: 2024-12-13T22:28:00.000Z
description: Notes from debugging and fixing layout shift issue caused by web fonts.
language: en
tags:
  - web development
  - performance
  - web fonts
  - css
thumbnail: /images/debugging-layout-shift/thumbnail.png
---
I recently spot this weird behavior on my blog: there is a blink for a split second on page load.

{% video
   src="/videos/debugging-layout-shift/layout-shift-issue.mp4"
   controls=true
   autoPlay=true
   loop=true /%}

After the page loads, everything looks fine. This sometimes happens too fast so it is barely noticeable.

The issue seems tiny, but I can't *unsee* it now. I have to fix it, because it bugs me every time when I see it happens.

## Inspecting the problem

The bug is pretty difficult to see. Luckily it happens on every first load so it is easy to reproduce. If I slow things down, I might see things more clearly.

I ~~borrow [Dr. Strange's Time Stone](https://marvelcinematicuniverse.fandom.com/wiki/Time_Stone#Used_by_Doctor_Strange)~~ use Chrome DevTools' feature to disable network cache, and throttle the connection speed to 'Slow 4G'.

![](../../../content/blog/debugging-layout-shift/x8dkPYE44@2x.png)

It works. I can see what is happening: initially, the content are was wider, the it got narrower. Something is moving there.

{% video
   src="/videos/debugging-layout-shift/layout-shift-slow.mp4"
   controls=true
   autoPlay=true
   loop=true /%}

My guess is that something might cause the [CLS: Cumulative Layout Shift](https://web.dev/articles/cls). So I jump to the Lighthouse tab in DevTools and run an audit (with network throttling still enabled).

Lighthouse shows that there is a small amount of CLS.

![](../../../content/blog/debugging-layout-shift/cls.png)

Lighthouse tells me that the source of the CLS is from the web fonts load events.

![](../../../content/blog/debugging-layout-shift/cls-trace.png)

So when the custom fonts are loaded, it causes the layout shift.

> I'm using [Source Serif 4](https://fonts.google.com/specimen/Source+Serif+4) as the primary font, with system's `sans-serif` as the fallback font. I'm using also `font-display: swap` so it displays the content using the fallback font while downloading Source Serif 4 from the network. Once it's downloaded, then it swaps the font on the screen.

To verify if fonts are the real cause of the layout shift, I use the network blocking feature to prevent the font files to load on the page, run another audit, and see if the issue is gone. And yes it is indeed gone. No more layout shifts.

![](../../../content/blog/debugging-layout-shift/fonts-blocking.png)

Another thing I notice now is that: only the main content shifts. The header element stays the same.

Digging a bit deeper I found the main content is a `.prose` element from the Tailwind typography plugin. This class sets the `max-width` of the element to be `65ch`.

{% warningMessage %}
The optimal line length for body text is around [50-75 characters](https://baymard.com/blog/line-length-readability). Tailwind uses `65ch` which is roughly about 65 characters. According to [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/length#ch), `1ch` is measured from the width of the character `0` of the current font.
{% /warningMessage %}

And because the "current font" changes from system sans-serif to Source Serif 4, the actual width of `1ch` and changes too.

`65ch` doesn't necessarily mean it will always be fixed at XYZ pixels. If the font changes, the width might change, and the layout might shift.

Gotcha.

**Lesson learned:** when using `font-display: swap` , I have to be careful with the fallback font stacks. Choosing the fallback font poorly can lead to negative side effects like this.

## Solving the layout shift from using custom font

I did some further research and found the article [Fixing Layout Shifts Caused by Web Fonts](https://www.debugbear.com/blog/web-font-layout-shift) by [Umar Hansa](https://x.com/umaar) explaining the similar issue I have.

In my case, here are a few solutions to fix layout shift:

1. use a fixed width unit for the container like `px` or `rem` instead of `ch`.
1. use `ch` unit, but choose a better fallback font.
1. use `ch` unit, with some other CSS properties for `@font-face` rules to tweak how the font should display.

### 1. Set a fixed width unit for the container

This can be done in Tailwind's config file `tailwind.config.ts`

```diff
export default {
  theme: {
    extend: {
      typography: {
        DEFAULT: {
          css: {
+           maxWidth: '700px',
          }
        }
      }
    }
  }
}
```

This will set the `max-width` for `.prose` elements to be `700px` instead of `65ch`

### 2. Set better fallback font

First I should at least set the fallback font to serif instead of sans-serif I imported from Tailwind.

```diff
export default {
  theme: {
    fontFamily: {
      sans: [
       'Source Serif 4', 
       'IBM Plex Sans Thai Looped', 
-      ...defaultTheme.fontFamily.sans,
+      ...defaultTheme.fontFamily.serif,
      ]
    },
```

On macOS, the fallback font is Georgia. The differences is still quite a lot at ~100px though. Here is the comparison between the 2 fonts.

{% video
   src="/videos/debugging-layout-shift/compare-serif-fonts.mp4"
   controls=true
   autoPlay=true
   loop=false /%}

I can also use Times instead of Georgia as a fallback. Times seems to be narrower than Georgia and would reduce the margins, but personally I don't like how Times looks so I wouldn't use it.

However, with *both* techniques combined, it gives an OK result. There is almost no visual layout shift, and CLS value from Lighthouse is much lower.

{% video
   src="/videos/debugging-layout-shift/_set-max-width-and-fallback-font.mp4"
   controls=true
   autoPlay=true
   loop=false /%}

![](../../../content/blog/debugging-layout-shift/result-from-lighthouse.png)

### 3. Adjust the fallback font's display with `@font-face` descriptors

{% warningMessage %}
**Spoiler alert:** I end up not implementing this technique because the result I got was not better. Below are notes from what I have learned from trying it out.
{% /warningMessage %}

This method is to create a tweaked version of the system font Georgia to make it visually appears closer to the Source Serif 4.

There are a few CSS properties for that can be added to `@font-face` rules to control how the font should display such as the `size-adjust` property that is supported by all browsers, or `line-gap-override`, `ascent-override`, or `descent-override` that are not supported yet in Safari.

These properties are all new to me. I have never used them before. Luckily there is a tool like [Fallback Font Generator](https://screenspan.net/fallback) to help.

I go to website, upload Source Serif 4 as a brand font, and select Georgia as a fallback font. I adjust the controls until both fonts are somewhat aligned in the preview area. The tool gives me the output CSS code that defines the adjusted Georgia `@font-face` rule.

![](../../../content/blog/debugging-layout-shift/ffg.png)

I add the new `@font-face` rule to the page, and update Tailwind config to use the adjusted Georgia as a fallback font. The first test didn't give the convincing result so I adjust the numbers a bit.

```html
<head>
  <style>
  @font-face {
    font-family: 'Adjusted Georgia Fallback';
    src: local(Georgia);
    size-adjust: 87%;
  }
  </style>
</head>
```

```diff
export default {
  theme: {
    fontFamily: {
      sans: [
       'Source Serif 4', 
       'IBM Plex Sans Thai Looped', 
-      ...defaultTheme.fontFamily.serif,
+      'Adjusted Georgia Fallback',
+      ...defaultTheme.fontFamily.serif,
      ]
    },
```

I end up with `size-adjust: 87%` which gives the visual width of 65ch of the content container closer to when using Source Serif 4 font. Rendered text still look quite different visually though.

{% video
   src="/videos/debugging-layout-shift/_adjusted-georgia.mp4"
   controls=true
   autoPlay=true
   loop=false /%}

There is another problem I face: I'm actually using 2 custom fonts for this website. This is the order of the fonts stack:

1. [Source Serif 4](https://fontsource.org/fonts/source-serif-4) - for most of the characters
1. [IBM Plex Sans Thai Looped](https://fontsource.org/fonts/ibm-plex-sans-thai-looped) - for Thai characters. It is imported as an [individual subset](https://fontsource.org/docs/getting-started/subsets) from Fontsource.
1. the Adjusted Georgia Fallback from above
1. default serif fonts stack from Tailwind

When putting IBM Plex Sans Thai Looped in, it causes another layout shift in between. From this video below, when reload the page, the layout goes from big > small > big again.

{% video
   src="/videos/debugging-layout-shift/_3-fonts.mp4"
   controls=true
   autoPlay=true
   loop=false /%}

My guess is that the shrink in between is caused by the second font in the fonts stack e.g. from `65ch` of the IBM Plex Sans Thai Looped font. That means that the Adjusted Georgia Fallback custom font only fixes the layout shift for Source Serif 4.

So if I want to minimize layout shift through all fonts in the stack, I would need to adjust the Georgia (or another font) to look closer to all other fonts.

For me, it's easier to give up the `65ch` max width and just go with the fixed value instead, which solves the layout shift issue regardless of the fonts I use.

It's a good learning anyway. I have learned a few new things.
