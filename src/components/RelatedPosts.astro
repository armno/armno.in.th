---
import { getCollection } from 'astro:content';
import { intersectionBy, sampleSize } from "lodash-es";
import PostItem from "@components/PostItem.astro";

interface Props {
  tags: string[];
  currentPathname: string;
}

const allPosts = await getCollection('blog');
const { tags, currentPathname } = Astro.props;

const allRelatedPosts = allPosts
  .filter(post => !currentPathname.includes(post.slug))
  // sort posts by most recent first
  .sort(
    (a, b) =>
      new Date(b.data.pubDate).valueOf() -
      new Date(a.data.pubDate).valueOf()
  )
  // filter to posts with only matched tags with the current post
  .filter(post => !!post.data.tags)
  .filter((post) => {
    const matchedTags = intersectionBy(tags, post.data.tags, (tag: string) => tag.toLowerCase());
    return matchedTags.length > 0;
  });

const relatedPosts = sampleSize(allRelatedPosts, 3);
---

{
  relatedPosts.length > 0 && (
    <section class="mt-20 not-prose" data-pagefind-ignore>
      <h4 class="text-sm text-slate-600 uppercase tracking-widest font-bold mb-4 dark:text-slate-200">
        Related posts
      </h4>
      <ul class="grid gap-y-8 lg:grid-cols-3 lg:gap-x-8 lg:gap-y-0">
        {relatedPosts.map((post) => (
          <PostItem
            url={`/blog/${post.slug}`}
            pubDate={post.data.pubDate}
            title={post.data.title}
            thumbnail={post.data.thumbnail}
            isRelatedPost={true}
          />
        ))}
      </ul>
    </section>
  )
}
